#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba16) uniform image2D prevTargetColor;
layout (binding = 1, r16) uniform image2D prevTargetDepth;
layout (binding = 2, rgba16) uniform image2D targetColor;
layout (binding = 3, r16) uniform image2D targetDepth;
layout (binding = 4) uniform UniformBufferObject {
    mat4 transform;
} ubo;

void main()
{
    ivec2 targetSize = ivec2(1920, 1080);

    vec4 color = imageLoad(prevTargetColor, ivec2(gl_GlobalInvocationID.xy));
    float depth = imageLoad(prevTargetDepth, ivec2(gl_GlobalInvocationID.xy)).r;
    imageStore(prevTargetColor, ivec2(gl_GlobalInvocationID.xy), vec4(0.0f));
    imageStore(prevTargetDepth, ivec2(gl_GlobalInvocationID.xy), vec4(1.0f));
    if (color.w < 0.1) return;


    vec2 tmp = vec2(gl_GlobalInvocationID) / targetSize;
    vec4 res = ubo.transform * vec4((vec2(gl_GlobalInvocationID) / targetSize - 0.5f) * 2.0f, depth, 1.0);
    res = res / res.w;
    res.xy = res.xy / 2.0f + 0.5f;
    color.w = color.w * 0.5;

    imageStore(targetColor, ivec2(round(res.xy * targetSize)), color);
    imageStore(targetDepth, ivec2(round(res.xy * targetSize)), res.zzzz);
}